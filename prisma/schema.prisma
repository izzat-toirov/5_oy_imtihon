// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  COACH
  PLAYER
  PARENT
  SUPER_ADMIN
}

model User {
  id                       Int       @id @default(autoincrement())
  full_name                String    @db.VarChar(50)
  phone                    String?   @unique @db.VarChar(15)
  email                    String    @unique @db.VarChar(50)
  hashedPassword           String
  is_active                Boolean   @default(false)
  role                     Role      @default(PARENT)
  hashedRefreshToken       String?
  activation_link          String?   @db.VarChar(255)
  resetPasswordToken       String?   @db.Text
  resetPasswordTokenExpiry DateTime?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Players      Players[]
  Coaches      Coaches[]
  Parents      Parents[]
  Notification Notification[]

  @@map("users")
}

model Players {
  id         Int      @id @default(autoincrement())
  user_id    Int
  birth_date DateTime
  position   String   @db.VarChar(50)
  jersey_no  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user               User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Performance_Score  Performance_Score[]
  Player_Parents     Player_Parents[]
  Team_Players       Team_Players[]
  Trainig_Attendance Trainig_Attendance[]
  Payments           Payments[]
  Match_Status       Match_Status[]
  Injuries           Injuries[]
  Player_Photo       Player_Photo[]

  @@map("players")
}

model Coaches {
  id         Int    @id @default(autoincrement())
  user_id    Int
  license_no String @db.VarChar(50)
  experiense String @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Teams             Teams[]
  Performance_Score Performance_Score[]

  @@map("coaches")
}

model Teams {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(50)
  coach_id  Int
  age_group String @db.VarChar(50)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  coach        Coaches        @relation(fields: [coach_id], references: [id], onDelete: Cascade)
  Matches      Matches[]
  Trainigs     Trainigs[]
  Team_Players Team_Players[]

  @@map("teams")
}

model Matches {
  id         Int      @id @default(autoincrement())
  team_id    Int
  opponent   String   @db.VarChar(50)
  match_Date DateTime
  location   String   @db.VarChar(255)
  result     String   @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team         Teams          @relation(fields: [team_id], references: [id], onDelete: Cascade)
  Match_Status Match_Status[]

  @@map("matches")
}

model Trainigs {
  id       Int      @id @default(autoincrement())
  team_id  Int
  date     DateTime
  time     DateTime
  location String   @db.VarChar(255)
  topic    String   @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team               Teams                @relation(fields: [team_id], references: [id], onDelete: Cascade)
  Trainig_Attendance Trainig_Attendance[]

  @@map("trainigs")
}

model Performance_Score {
  id         Int      @id @default(autoincrement())
  player_id  Int
  coach_id   Int
  date       DateTime
  discipline Int
  physical   Int
  technique  Int
  notes      String   @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  player Players @relation(fields: [player_id], references: [id], onDelete: Cascade)
  coach  Coaches @relation(fields: [coach_id], references: [id], onDelete: Cascade)

  @@map("performance_Score")
}

model Parents {
  id       Int    @id @default(autoincrement())
  user_id  Int
  relation String @db.VarChar(50)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Player_Parents Player_Parents[]
  Payments       Payments[]

  @@map("parents")
}

model Player_Parents {
  id        Int @id @default(autoincrement())
  player_id Int
  parent_id Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  player Players @relation(fields: [player_id], references: [id], onDelete: Cascade)
  parent Parents @relation(fields: [parent_id], references: [id], onDelete: Cascade)

  @@map("player_Parents")
}

model Team_Players {
  id        Int    @id @default(autoincrement())
  team_id   Int
  player_id Int
  position  String @db.VarChar(30)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team   Teams   @relation(fields: [team_id], references: [id], onDelete: Cascade)
  player Players @relation(fields: [player_id], references: [id], onDelete: Cascade)

  @@map("team_Players")
}

model Trainig_Attendance {
  id         Int    @id @default(autoincrement())
  trainig_id Int
  player_id  Int
  status     String @db.VarChar(30)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trainig Trainigs @relation(fields: [trainig_id], references: [id], onDelete: Cascade)
  player  Players  @relation(fields: [player_id], references: [id], onDelete: Cascade)

  @@map("trainig_Attendance")
}

model Payments {
  id           Int      @id @default(autoincrement())
  parent_id    Int
  player_id    Int
  amount       Decimal
  payment_date DateTime
  method       String   @db.VarChar(50)
  prelod       String   @db.VarChar(50)
  status       String   @db.VarChar(50)
  reference    String   @db.VarChar(255)
  notes        String   @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent Parents @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  player Players @relation(fields: [player_id], references: [id], onDelete: Cascade)

  @@map("payments")
}


model Notification {
  id      Int     @id @default(autoincrement())
  user_id Int
  title   String  @db.VarChar(150)
  message String  @db.VarChar(255)
  is_read Boolean

  createdAt DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notification")
}

model Match_Status {
  id           Int @id @default(autoincrement())
  match_id     Int
  player_id    Int
  goals        Int @default(0)
  assists      Int @default(0)
  yellow_cards Int @default(0)
  red_cards    Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  match  Matches @relation(fields: [match_id], references: [id], onDelete: Cascade)
  player Players @relation(fields: [player_id], references: [id], onDelete: Cascade)

  @@map("match_Status")
}

model Injuries {
  id            Int      @id @default(autoincrement())
  player_id     Int
  description   String   @db.VarChar(255)
  injury_date   DateTime
  recovery_date DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  player Players @relation(fields: [player_id], references: [id], onDelete: Cascade)

  @@map("injuries")
}

model Player_Photo {
  id        Int    @id @default(autoincrement())
  player_id Int
  photo_url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  player Players @relation(fields: [player_id], references: [id], onDelete: Cascade)

  @@map("player_Photo")
}

model Age_Group_Fess {
  id          Int     @id @default(autoincrement())
  age_group   String  @db.VarChar(10)
  min_age     Int
  max_age     Int
  monthly_fee Decimal

  @@map("age_Group_Fess")
}
