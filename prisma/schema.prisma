// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  COACH
  PLAYER
  PARENT
  SUPER_ADMIN
}

model User {
  id                 Int     @id @default(autoincrement())
  full_name          String  @db.VarChar(50)
  phone              String? @unique @db.VarChar(15)
  email              String  @unique @db.VarChar(50)
  hashedPassword     String
  is_active          Boolean @default(false)
  role               Role    @default(PARENT)
  hashedRefreshToken String?
  activation_link    String? @db.VarChar(255)
  resetPasswordToken     String?  @db.Text
  resetPasswordTokenExpiry DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Players   Players[]
  Coaches   Coaches[]

  @@map("users")
}

model Players {
  id         Int      @id @default(autoincrement())
  user_id    Int
  birth_date DateTime
  position   String   @db.VarChar(50)
  jersey_no  Int
  photo_url  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("players")
}

model Coaches {
  id         Int    @id @default(autoincrement())
  user_id    Int
  license_no String @db.VarChar(50)
  experiense String @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Teams Teams[]

  @@map("coaches")
}

model Teams {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(50)
  coach_id  Int
  age_group String @db.VarChar(50)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  coach   Coaches   @relation(fields: [coach_id], references: [id], onDelete: Cascade)
  Matches Matches[]

  @@map("teams")
}

model Matches {
  id         Int      @id @default(autoincrement())
  team_id    Int
  opponent   String   @db.VarChar(50)
  match_Date DateTime
  location   String   @db.VarChar(255)
  result     String   @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Teams @relation(fields: [team_id], references: [id], onDelete: Cascade)

  @@map("matches")
}
